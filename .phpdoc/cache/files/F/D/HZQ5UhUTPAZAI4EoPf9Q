1645153378
AwuilbDvXz%3A0ad2286fb1ab9c8b1ec84d26853bf8f1-8c2b30a8c58733d2d3810f3ef718f0ca
s:81708:"O:33:"phpDocumentor\Reflection\Php\File":12:{s:43:" phpDocumentor\Reflection\Php\File docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:52:"Incluimos los modelos que necesite este controlador.";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:0:{}s:42:" phpDocumentor\Reflection\DocBlock context";O:38:"phpDocumentor\Reflection\Types\Context":2:{s:49:" phpDocumentor\Reflection\Types\Context namespace";s:0:"";s:56:" phpDocumentor\Reflection\Types\Context namespaceAliases";a:0:{}}s:43:" phpDocumentor\Reflection\DocBlock location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:3;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"8c2b30a8c58733d2d3810f3ef718f0ca";s:39:" phpDocumentor\Reflection\Php\File name";s:18:"UserController.php";s:39:" phpDocumentor\Reflection\Php\File path";s:34:"app/controllers/UserController.php";s:41:" phpDocumentor\Reflection\Php\File source";s:33191:"<?php

/**
 * Incluimos los modelos que necesite este controlador.
 */
require_once MODELS_FOLDER.'UserModel.php';

/**
 * Clase controlador que será la encargada de obtener, para cada tarea, los datos
 * necesarios de la base de datos, y posteriormente, tras su proceso de elaboración,
 * enviarlos a la vista para su visualización.
 */
class UserController extends BaseController
{
    // El atributo $modelo es de la 'clase modelo' y será a través del que podremos
    // acceder a los datos y las operaciones de la base de datos desde el controlador
    private $modelo;
    //$mensajes se utiliza para almacenar los mensajes generados en las tareas,
    //que serán posteriormente transmitidos a la vista para su visualización
    private $mensajes;

    /**
     * Constructor que crea automáticamente un objeto modelo en el controlador e
     * inicializa los mensajes a vacío.
     */
    public function __construct()
    {
        parent::__construct();
        $this->modelo = new UserModel();
        $this->mensajes = [];
    }

    /**
     * Método que obtiene de la base de datos el listado de usuarios y envía dicha
     * infomación a la vista correspondiente para su visualización.
     */
    public function listado()
    {
        //Si no estas logueado como admin no puedes acceder
        if ($_SESSION['rol_id'] == 0) {
            // Almacenamos en el array 'parametros[]'los valores que vamos a mostrar en la vista
            $parametros = [
         'tituloventana' => 'Listado de usuarios',
         'datos' => null,
         'mensajes' => [],
         'numpaginas' => null,
         'regsxpag' => null,
         'totalregistros' => null,
      ];
            $regsxpag = (isset($_GET['regsxpag'])) ? (int) $_GET['regsxpag'] : 5;
            //Establecemos la página que vamos a mostrar, por página, por defecto la 1
            $pagina = (isset($_GET['pagina'])) ? (int) $_GET['pagina'] : 1;
            //Definimos la variable $offset que indique la posición del registro desde el que se
            // mostrarán los registros de una página dentro de la paginación.
            $offset = ($pagina > 1) ? (($pagina - 1) * $regsxpag) : 0;

            $totalregistros = $this->modelo->cuentaUser();

            //Determinamos el número de páginas de la que constará mi paginación
            $numpaginas = ceil($totalregistros / $regsxpag);
            // Realizamos la consulta y almacenamos los resultados en la variable $resultModelo
            $resultModelo = $this->modelo->listado($regsxpag, $offset);

            // Si la consulta se realizó correctamente transferimos los datos obtenidos
            // de la consulta del modelo ($resultModelo["datos"]) a nuestro array parámetros
            // ($parametros["datos"]), que será el que le pasaremos a la vista para visualizarlos
            if ($resultModelo['correcto']) :
         $parametros['datos'] = $resultModelo['datos'];
            //Definimos el mensaje para el alert de la vista de que todo fue correctamente
            $this->mensajes[] = [
            'tipo' => 'success',
            'mensaje' => 'El listado se realizó correctamente',
         ]; else :
         //Definimos el mensaje para el alert de la vista de que se produjeron errores al realizar el listado
         $this->mensajes[] = [
            'tipo' => 'danger',
            'mensaje' => "El listado no pudo realizarse correctamente!! :( <br/>({$resultModelo['error']})",
         ];
            endif;

            $parametros = [
            'tituloventana' => 'Listado de usuarios',
            'datos' => $resultModelo['datos'],
            'mensajes' => $this->mensajes,
            'numpaginas' => $numpaginas,
            'regsxpag' => $regsxpag,
            'totalregistros' => $totalregistros,
            'pagina' => $pagina,
         ];
            // Incluimos la vista en la que visualizaremos los datos o un mensaje de error
            $this->view->show('ListaUser', $parametros);
        } else {
            $parametros = [
            'tituloventana' => 'Prohibido el paso',
            'datos' => [],
            'mensajes' => $this->mensajes,
         ];
            $this->view->show('Prohibido', $parametros);
        }
    }

    /**
     * Método de la clase controlador que realiza la eliminación de un usuario a
     * través del campo id.
     */
    public function deluser()
    {
        //Si no estas logueado como administrador no puedes hacerlo
        if ($_SESSION['rol_id'] == 0) {
            // verificamos que hemos recibido los parámetros desde la vista de listado
            if (isset($_GET['id']) && (is_numeric($_GET['id']))) {
                $id = $_GET['id'];

                //Realizamos la operación de suprimir el usuario con el id=$id
                $resultModelo = $this->modelo->deluser($id);
                //Analizamos el valor devuelto por el modelo para definir el mensaje a
                //mostrar en la vista listado
                if ($resultModelo['correcto']) :
            $this->mensajes[] = [
               'tipo' => 'success',
               'mensaje' => "Se eliminó correctamente el usuario $id",
            ]; else :
            $this->mensajes[] = [
               'tipo' => 'danger',
               'mensaje' => "La eliminación del usuario no se realizó correctamente!! :( <br/>({$resultModelo['error']})",
            ];
                endif;
            } else { //Si no recibimos el valor del parámetro $id generamos el mensaje indicativo:
                $this->mensajes[] = [
            'tipo' => 'danger',
            'mensaje' => 'No se pudo acceder al id del usuario a eliminar!! :(',
         ];
            }
            //Realizamos el listado de los usuarios
            $this->listado();
        } else {
            $parametros = [
            'tituloventana' => 'Prohibido el paso',
            'datos' => [],
            'mensajes' => $this->mensajes,
         ];
            $this->view->show('Prohibido', $parametros);
        }
    }

    /**
     * Método de la clase controlador que realiza el añadido de un usuario,
     * lo hace un administrador.
     */
    public function adduser()
    {
        //Si el rol del usuario logueado no es admin no puedee hacerlo
        if ($_SESSION['rol_id'] == 0) {
            $parametros = [
                'tituloventana' => 'Registro de usuario by admin',
                'datos' => null,
                'mensajes' => [],
             ];
            // Array asociativo que almacenará los mensajes de error que se generen por cada campo
            $errores = [];
            // Si se ha pulsado el botón guardar...
      if (isset($_POST) && !empty($_POST) && isset($_POST['submit'])) { // y hemos recibido las variables del formulario y éstas no están vacías...
        $nombre = filter_var($_POST['txtnombre'], FILTER_SANITIZE_STRING);
          $nif = filter_var($_POST['txtnif'], FILTER_SANITIZE_STRING);
          $apellidos = filter_var($_POST['txtapellidos'], FILTER_SANITIZE_STRING);
          $email = filter_var($_POST['txtemail'], FILTER_SANITIZE_STRING);
          $password = filter_var($_POST['txtpassword'], FILTER_SANITIZE_STRING);
          $password2 = filter_var($_POST['txtpassword2'], FILTER_SANITIZE_STRING);
          $telefono = filter_var($_POST['txttelefono'], FILTER_SANITIZE_STRING);
          $direccion = filter_var($_POST['txtdireccion'], FILTER_SANITIZE_STRING);
          $imagen = '-';
          $estado = $_POST['txtestado'];
          $rol_id = $_POST['txtrol_id'];
          $filtrardatos = [
            'nif' => $nif,
            'email' => $email,
            'password' => $password,
            'telefono' => $telefono,
        ];

          //Filta los datos y comprueba el email y las contraseñas

          $errores = $this->modelo->filtraDatos($filtrardatos);

          $errores += $this->modelo->existeEmail($email);
          $errores += $this->modelo->comparaPassword($password, $password2);

          // Si no se han producido errores realizamos el registro del usuario

          if (count($errores) == 0) {
              $resultModelo = $this->modelo->adduser([
               'nif' => $nif,
               'nombre' => $nombre,
               'apellidos' => $apellidos,
                'email' => $email,
                'password' => sha1($password),
                'telefono' => $telefono,
                'direccion' => $direccion,
                'estado' => $estado,
                'imagen' => $imagen,
                'rol_id' => $rol_id,
            ]);
              if ($resultModelo['correcto']) :
               $this->mensajes[] = [
                  'tipo' => 'success',
                  'mensaje' => 'El usuarios se registró correctamente!! :)',
               ]; else :
               $this->mensajes[] = [
                  'tipo' => 'danger',
                  'mensaje' => "El usuario no pudo registrarse!! :( <br />({$resultModelo['error']})",
               ];
              endif;
          } else {
              //Recorre los errores y los muestra si existen
              foreach ($errores as $e) {
                  $this->mensajes[] = [
                    'tipo' => 'danger',
                    'mensaje' => $e,
                 ];
              }
          }
      }

            $parametros = [
         'tituloventana' => 'Registro de usuario by administrador',
         'datos' => [
            'txtnif' => isset($nif) ? $nif : '',
               'txtnombre' => isset($nombre) ? $nombre : '',
               'txtapellidos' => isset($apellidos) ? $apellidos : '',
                'txtemail' => isset($email) ? $email : '',
                'txtpassword' => isset($password) ? $password : '',
                'txttelefono' => isset($telefono) ? $telefono : '',
                'txtdireccion' => isset($direccion) ? $direccion : '',
                'txtestado' => isset($estado) ? $estado : '',
                'imagen' => isset($imagen) ? $imagen : '',
                'rol_id' => isset($rol_id) ? $rol_id : 3,
         ],
         'mensajes' => $this->mensajes,
      ];
            //Visualizamos la vista asociada al registro del usuario
            $this->view->show('AddUser', $parametros);
        } else {
            $parametros = [
            'tituloventana' => 'Prohibido el paso',
            'datos' => [],
            'mensajes' => $this->mensajes,
         ];
            $this->view->show('Prohibido', $parametros);
        }
    }

    /**
     * Método de la clase controlador que permite actualizar los datos del usuario
     * cuyo id coincide con el que se pasa como parámetro desde la vista de listado.
     */
    public function actuser()
    {
        // Array asociativo que almacenará los mensajes de error que se generen por cada campo
        $errores = [];

        //Si no estas logueado como admin no entras
        if ($_SESSION['rol_id'] == 0) {
            // Inicializamos valores de los campos de texto

            $valnombre = '';
            $valnif = '';
            $valapellidos = '';
            $valemail = '';
            $valpassword = '';
            $valpassword2 = '';
            $valtelefono = '';
            $valdireccion = '';
            $valrol_id = 3;

            // Si se ha pulsado el botón actualizar...
      if (isset($_POST['submit'])) { //Realizamos la actualización con los datos existentes en los campos
          $id = $_POST['id'];
          $nuevonombre = filter_var($_POST['txtnombre'], FILTER_SANITIZE_STRING);
          $nuevonif = filter_var($_POST['txtnif'], FILTER_SANITIZE_STRING);
          $nuevoapellidos = filter_var($_POST['txtapellidos'], FILTER_SANITIZE_STRING);
          $nuevoemail = filter_var($_POST['txtemail'], FILTER_SANITIZE_STRING);

          $nuevopassword = filter_var($_POST['txtpassword'], FILTER_SANITIZE_STRING);
          $nuevopassword2 = filter_var($_POST['txtpassword2'], FILTER_SANITIZE_STRING);

          $nuevotelefono = filter_var($_POST['txttelefono'], FILTER_SANITIZE_STRING);
          $nuevodireccion = filter_var($_POST['txtdireccion'], FILTER_SANITIZE_STRING);
          $nuevoimagen = '-';
          $nuevorol_id = $_POST['txtrol_id'];

          //Se hace esto porque si no se quiere cambiar la contraseña no hace las comprobaciones
          //pq daria error
          if ($_POST['txtpassword'] == '' && $_POST['txtpassword2'] == '') {
              $filtrardatos = [
                'nif' => $nuevonif,
                'email' => $nuevoemail,
                'telefono' => $nuevotelefono,
            ];
          } else {
              $filtrardatos = [
          'nif' => $nuevonif,
          'email' => $nuevoemail,
          'password' => $nuevopassword,
          'telefono' => $nuevotelefono,
      ];
          }

          $errores = $this->modelo->filtraDatos($filtrardatos);

          //si el mail no es igual al escrito, que será que no quiero actualozarlo,
          //comprueba si existe ya
          if ($this->modelo->listausuario($id)['datos']['email'] != $nuevoemail) {
              $errores += $this->modelo->existeEmail($nuevoemail);
          }

          //si se ha escrito una nueva password las compara y la guarda para actualizarla
          if ($_POST['txtpassword'] != '' && $_POST['txtpassword2'] != '') {
              $errores += $this->modelo->comparaPassword($nuevopassword, $nuevopassword2);
              $nuevopassword = sha1($nuevopassword);
          }

          //Ejecutamos la instrucción de actualización a la que le pasamos los valores
          if (count($errores) == 0) {
              //si nuevo password esta vacio guarda la contraseña que tenia ya antes
              if (empty($nuevopassword)) {
                  $nuevopassword = $this->modelo->listausuario($id)['datos']['password'];
              }
              $resultModelo = $this->modelo->actuser([
                  'id' => $id,
                 'nif' => $nuevonif,
                 'nombre' => $nuevonombre,
                 'apellidos' => $nuevoapellidos,
                  'email' => $nuevoemail,
                  'password' => $nuevopassword,
                  'telefono' => $nuevotelefono,
                  'direccion' => $nuevodireccion,
                  'imagen' => $nuevoimagen,
                  'rol_id' => $nuevorol_id,
              ]);
              //Analizamos cómo finalizó la operación de registro y generamos un mensaje
              //indicativo del estado correspondiente
              if ($resultModelo['correcto']) :
              $this->mensajes[] = [
                  'tipo' => 'success',
                  'mensaje' => 'El usuario se actualizó correctamente!! :)',
               ]; else :
               $this->mensajes[] = [
                  'tipo' => 'danger',
                  'mensaje' => "El usuario no pudo actualizarse!! :( <br/>({$resultModelo['error']})",
               ];
              endif;
          } else {
              foreach ($errores as $e) {
                  $this->mensajes[] = [
                        'tipo' => 'danger',
                        'mensaje' => $e,
                     ];
              }
          }

          //   // Obtenemos los valores para mostrarlos en los campos del formulario
          $valnombre = $nuevonombre;
          $valnif = $nuevonif;
          $valapellidos = $nuevoapellidos;
          $valemail = $nuevoemail;
          $valpassword = $nuevopassword;
          $valtelefono = $nuevotelefono;
          $valdireccion = $nuevodireccion;
          $valrol_id = $nuevorol_id;
      } else { //Estamos rellenando los campos con los valores recibidos del listado
          if (isset($_GET['id']) && (is_numeric($_GET['id']))) {
              $id = $_GET['id'];
              //Ejecutamos la consulta para obtener los datos del usuario #id
              $resultModelo = $this->modelo->listausuario($id);
              //Analizamos si la consulta se realiz´correctamente o no y generamos un
              //mensaje indicativo
              if ($resultModelo['correcto']) :
                 $this->mensajes[] = [
                    'tipo' => 'success',
                    'mensaje' => 'Los datos del usuario se obtuvieron correctamente!! :)',
                 ];
              $valnombre = $resultModelo['datos']['nombre'];
              $valnif = $resultModelo['datos']['nif'];
              $valapellidos = $resultModelo['datos']['apellidos'];
              $valemail = $resultModelo['datos']['email'];
              $valpassword = $resultModelo['datos']['password'];
              $valtelefono = $resultModelo['datos']['telefono'];
              $valdireccion = $resultModelo['datos']['direccion'];
              $valrol_id = $resultModelo['datos']['rol_id']; else :
                 $this->mensajes[] = [
                    'tipo' => 'danger',
                    'mensaje' => "No se pudieron obtener los datos de usuario!! :( <br/>({$resultModelo['error']})",
                 ];
              endif;
          }
      }
            //Preparamos un array con todos los valores que tendremos que rellenar en
            //la vista adduser: título de la página y campos del formulario
            $parametros = [
         'tituloventana' => 'Actualiza usuario',
         'datos' => [
            'txtnombre' => $valnombre,
            'txtnif' => $valnif,
               'txtapellidos' => $valapellidos,
                'txtemail' => $valemail,
                'txtpassword' => '',
                'txttelefono' => $valtelefono,
                'txtdireccion' => $valdireccion,
                // 'txtestado' => isset($estado) ? $estado : '',
                // 'imagen' => isset($imagen) ? $imagen : '',
                 'txtrol_id' => $valrol_id,
         ],
         'mensajes' => $this->mensajes,
          'id' => $id,
      ];
            //Mostramos la vista actuser
            $this->view->show('ActUser', $parametros);
        } else {
            $parametros = [
                'tituloventana' => 'Prohibido el paso',
                'datos' => [],
                'mensajes' => $this->mensajes,
             ];
            $this->view->show('Prohibido', $parametros);
        }
    }

    /**
     * Método de la clase controlador que permite actualizar la foto del usuario
     * cuyo id coincide con el que se pasa como parámetro desde la vista.
     */
    public function actFoto()
    {
        $imagen;

        if (isset($_FILES['imagen']) && (!empty($_FILES['imagen']['tmp_name']))) {
            if (!is_dir('assets/img/perfil')) {
                $dir = mkdir('assets/img/perfil', 0777, true);
            } else {
                $dir = true;
            }
            // Ya verificado que la carpeta uploads existe movemos el fichero seleccionado a dicha carpeta
            if ($dir) {
                //Para asegurarnos que el nombre va a ser único...
                $nombrefichimg = time().'-'.$_FILES['imagen']['name'];
                // Movemos el fichero de la carpeta temportal a la nuestra
                $movfichimg = move_uploaded_file($_FILES['imagen']['tmp_name'], 'assets/img/perfil'.$nombrefichimg);
                $imagen = $nombrefichimg;
                // Verficamos que la carga se ha realizado correctamente
                if ($movfichimg) {
                    $imagencargada = true;
                } else {
                    $imagencargada = false;
                    $this->mensajes[] = [
                   'tipo' => 'danger',
                   'mensaje' => 'Error: La imagen no se cargó correctamente! :(',
                ];
                    $errores['imagen'] = 'Error: La imagen no se cargó correctamente! :(';
                }
            }
        }
        // Si no se han producido errores realizamos el registro del usuario
        if (count($errores) == 0) {
            $resultModelo = $this->modelo->actImg([
               'imagen' => $imagen,
            ]);
            if ($resultModelo['correcto']) :
                $this->mensajes[] = [
                   'tipo' => 'success',
                   'mensaje' => 'La foto se actualizó correctamente!! :)',
                ]; else :
                $this->mensajes[] = [
                   'tipo' => 'danger',
                   'mensaje' => "La foto no pudo actualizarse!! :( <br />({$resultModelo['error']})",
                ];
            endif;
        }
        // Obtenemos los valores para mostrarlos en los campos del formulario
        $valimagen = $nuevaimagen;

        //Preparamos un array con todos los valores que tendremos que rellenar en
        //la vista actimg: título de la página y campos del formulario
        $parametros = [
        'tituloventana' => 'Actualiza imagen',
        'datos' => [
           'imagen' => $valimagen,
        ],
        'mensajes' => $this->mensajes,
        'id' => $id,
     ];
        //Mostramos la vista actuser
        $this->view->show('ActImg', $parametros);
    }

    /**
     * Método de la clase controlador que permite activar el usuario
     * cuyo id coincide con el que se pasa como parámetro desde la vista de listado.
     */
    public function activarus()
    {
        //Si el logueado no es admin no puede
        if ($_SESSION['rol_id'] == 0) {
            if (isset($_GET['id'])) {
                $id = $_GET['id'];

                //Llama al modelo y active el user
                $resultModelo = $this->modelo->activarus($id);
                //Analizamos el valor devuelto por el modelo para definir el mensaje a
                //mostrar en la vista listado
                if ($resultModelo['correcto']) :
            $this->mensajes[] = [
               'tipo' => 'success',
               'mensaje' => "Se activó correctamente el usuario $id",
            ]; else :
            $this->mensajes[] = [
               'tipo' => 'danger',
               'mensaje' => "La activacion del usuario no se realizó correctamente!! :( <br/>({$resultModelo['error']})",
            ];
                endif;
            } else { //Si no recibimos el valor del parámetro $id generamos el mensaje indicativo:
                $this->mensajes[] = [
            'tipo' => 'danger',
            'mensaje' => 'No se pudo acceder al id del usuario a activar!! :(',
         ];
            }

            $parametros = [
            'tituloventana' => 'Listado usuarios',
            'datos' => [],
            'mensajes' => $this->mensajes,
         ];
            $this->listado();
        } else {
            $parametros = [
            'tituloventana' => 'Prohibido el paso',
            'datos' => [],
            'mensajes' => $this->mensajes,
         ];
            $this->view->show('Prohibido', $parametros);
        }
    }

    /**
     * Método de la clase controlador que permite desactivar el usuario
     * cuyo id coincide con el que se pasa como parámetro desde la vista de listado.
     */
    public function desactivarus()
    {
        if ($_SESSION['rol_id'] == 0) {
            if (isset($_GET['id'])) {
                $id = $_GET['id'];

                $resultModelo = $this->modelo->desactivarus($id);
                //Analizamos el valor devuelto por el modelo para definir el mensaje a
                //mostrar en la vista listado
                if ($resultModelo['correcto']) :
            $this->mensajes[] = [
               'tipo' => 'success',
               'mensaje' => "Se desactivó correctamente el usuario $id",
            ]; else :
            $this->mensajes[] = [
               'tipo' => 'danger',
               'mensaje' => "La desactivacion del usuario no se realizó correctamente!! :( <br/>({$resultModelo['error']})",
            ];
                endif;
            } else { //Si no recibimos el valor del parámetro $id generamos el mensaje indicativo:
                $this->mensajes[] = [
            'tipo' => 'danger',
            'mensaje' => 'No se pudo acceder al id del usuario a desactivar!! :(',
         ];
            }

            $parametros = [
            'tituloventana' => 'Listado usuarios',
            'datos' => [],
            'mensajes' => $this->mensajes,
         ];
            $this->listado();
        } else {
            $parametros = [
            'tituloventana' => 'Prohibido el paso',
            'datos' => [],
            'mensajes' => $this->mensajes,
         ];
            $this->view->show('Prohibido', $parametros);
        }
    }

    /**
     * Método de la clase controlador que imprime el listado de usuarios
     * con html2pdf aunque no funciona.
     */
    public function imprimeListado()
    {
        require VENDOR_FOLDER.'autoload.php';

        if ($_SESSION['rol_id'] == 0) {
            $parametros = [
            'tituloventana' => 'PDF Listado de usuarios',
            'datos' => null,
            'mensajes' => [],
         ];

            $resultado = $this->modelo->listadoCompleto();

            if ($resultado['correcto']) {
                ob_start();
                $parametros = ['datos' => $resultado];
                $this->view->show('ListaUserpdf', $parametros);

                $html = ob_get_clean();

                $html2pdf = new Html2Pdf('P', 'A4', 'es', 'true', 'UTF-8');
                $html2pdf->writeHTML($html);
                $html2pdf->output('listado_usuarios.pdf ');
                ob_end_clean();
            } else {
                $parametros = [
                    'tituloventana' => 'Error desconocido',
                    'datos' => null,
                    'mensajes' => [
                        'tipo' => 'danger',
               'mensaje' => "El listado no se hizo correctamente :( <br/>({$resultado['error']})",
            ],
                 ];
            }
        } else {
            $parametros = [
            'tituloventana' => 'Prohibido el paso',
            'datos' => [],
            'mensajes' => $this->mensajes,
         ];
            $this->view->show('Prohibido', $parametros);
        }
    }

    /**
     * Método de la clase controlador que muestra el perfil del usuario
     * Sin terminar.
     */
    public function perfil()
    {
        // Array asociativo que almacenará los mensajes de error que se generen por cada campo
        $errores = [];

        if ($_SESSION['rol_id'] == 0) {
            // Inicializamos valores de los campos de texto

            $valnombre = '';
            $valnif = '';
            $valapellidos = '';
            $valemail = '';
            $valpassword = '';
            $valpassword2 = '';
            $valtelefono = '';
            $valdireccion = '';
            $valrol_id = 3;

            //dnd guardo el id!!!

            // Si se ha pulsado el botón actualizar...
      if (isset($_POST['submit'])) { //Realizamos la actualización con los datos existentes en los campos
          $id = $_POST['id'];
          $nuevonombre = filter_var($_POST['txtnombre'], FILTER_SANITIZE_STRING);
          $nuevonif = filter_var($_POST['txtnif'], FILTER_SANITIZE_STRING);
          $nuevoapellidos = filter_var($_POST['txtapellidos'], FILTER_SANITIZE_STRING);
          $nuevoemail = filter_var($_POST['txtemail'], FILTER_SANITIZE_STRING);

          $nuevopassword = filter_var($_POST['txtpassword'], FILTER_SANITIZE_STRING);
          $nuevopassword2 = filter_var($_POST['txtpassword2'], FILTER_SANITIZE_STRING);

          $nuevotelefono = filter_var($_POST['txttelefono'], FILTER_SANITIZE_STRING);
          $nuevodireccion = filter_var($_POST['txtdireccion'], FILTER_SANITIZE_STRING);
          $nuevoimagen = '-';
          $nuevorol_id = $_POST['txtrol_id'];

          if ($_POST['txtpassword'] == '' && $_POST['txtpassword2'] == '') {
              $filtrardatos = [
                'nif' => $nuevonif,
                'email' => $nuevoemail,
                'telefono' => $nuevotelefono,
            ];
          } else {
              $filtrardatos = [
          'nif' => $nuevonif,
          'email' => $nuevoemail,
          'password' => $nuevopassword,
          'telefono' => $nuevotelefono,
      ];
          }

          $errores = $this->modelo->filtraDatos($filtrardatos);
          if ($this->modelo->listausuario($id)['datos']['email'] != $nuevoemail) {
              $errores += $this->modelo->existeEmail($nuevoemail);
          }
          if ($_POST['txtpassword'] != '' && $_POST['txtpassword2'] != '') {
              $errores += $this->modelo->comparaPassword($nuevopassword, $nuevopassword2);
              $nuevopassword = sha1($nuevopassword);
          }

          //Ejecutamos la instrucción de actualización a la que le pasamos los valores
          if (count($errores) == 0) {
              if (empty($nuevopassword)) {
                  $nuevopassword = $this->modelo->listausuario($id)['datos']['password'];
              }
              $resultModelo = $this->modelo->actuser([
                  'id' => $id,
                 'nif' => $nuevonif,
                 'nombre' => $nuevonombre,
                 'apellidos' => $nuevoapellidos,
                  'email' => $nuevoemail,
                  'password' => $nuevopassword,
                  'telefono' => $nuevotelefono,
                  'direccion' => $nuevodireccion,
                  'imagen' => $nuevoimagen,
                  'rol_id' => $nuevorol_id,
              ]);
              //Analizamos cómo finalizó la operación de registro y generamos un mensaje
              //indicativo del estado correspondiente
              if ($resultModelo['correcto']) :
            //    $this->listado();
              $this->mensajes[] = [
                  'tipo' => 'success',
                  'mensaje' => 'El usuario se actualizó correctamente!! :)',
               ]; else :
               $this->mensajes[] = [
                  'tipo' => 'danger',
                  'mensaje' => "El usuario no pudo actualizarse!! :( <br/>({$resultModelo['error']})",
               ];
              endif;
          } else {
              foreach ($errores as $e) {
                  $this->mensajes[] = [
                        'tipo' => 'danger',
                        'mensaje' => $e,
                     ];
              }
          }

          //   // Obtenemos los valores para mostrarlos en los campos del formulario
          $valnombre = $nuevonombre;
          $valnif = $nuevonif;
          $valapellidos = $nuevoapellidos;
          $valemail = $nuevoemail;
          $valpassword = $nuevopassword;
          $valtelefono = $nuevotelefono;
          $valdireccion = $nuevodireccion;
          $valrol_id = $nuevorol_id;
      } else { //Estamos rellenando los campos con los valores recibidos del listado
          if (isset($_GET['id']) && (is_numeric($_GET['id']))) {
              $id = $_GET['id'];
              //Ejecutamos la consulta para obtener los datos del usuario #id
              $resultModelo = $this->modelo->listausuario($id);
              //Analizamos si la consulta se realiz´correctamente o no y generamos un
              //mensaje indicativo
              if ($resultModelo['correcto']) :
                 $this->mensajes[] = [
                    'tipo' => 'success',
                    'mensaje' => 'Los datos del usuario se obtuvieron correctamente!! :)',
                 ];
              $valnombre = $resultModelo['datos']['nombre'];
              $valnif = $resultModelo['datos']['nif'];
              $valapellidos = $resultModelo['datos']['apellidos'];
              $valemail = $resultModelo['datos']['email'];
              $valpassword = $resultModelo['datos']['password'];
              $valtelefono = $resultModelo['datos']['telefono'];
              $valdireccion = $resultModelo['datos']['direccion'];
              $valrol_id = $resultModelo['datos']['rol_id']; else :
                 $this->mensajes[] = [
                    'tipo' => 'danger',
                    'mensaje' => "No se pudieron obtener los datos de usuario!! :( <br/>({$resultModelo['error']})",
                 ];
              endif;
          }
      }
            //Preparamos un array con todos los valores que tendremos que rellenar en
            //la vista adduser: título de la página y campos del formulario
            $parametros = [
         'tituloventana' => 'Actualiza usuario',
         'datos' => [
            'txtnombre' => $valnombre,
            'txtnif' => $valnif,
               'txtapellidos' => $valapellidos,
                'txtemail' => $valemail,
                'txtpassword' => '',
                'txttelefono' => $valtelefono,
                'txtdireccion' => $valdireccion,
                // 'txtestado' => isset($estado) ? $estado : '',
                // 'imagen' => isset($imagen) ? $imagen : '',
                 'txtrol_id' => $valrol_id,
         ],
         'mensajes' => $this->mensajes,
          'id' => $id,
      ];
            //Mostramos la vista actuser
            $this->view->show('ActUser', $parametros);
        } else {
            $parametros = [
                'tituloventana' => 'Prohibido el paso',
                'datos' => [],
                'mensajes' => $this->mensajes,
             ];
            $this->view->show('Prohibido', $parametros);
        }
    }
}
";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:0:{}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:0:{}s:44:" phpDocumentor\Reflection\Php\File constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\File classes";a:1:{s:15:"\UserController";O:35:"phpDocumentor\Reflection\Php\Class_":11:{s:42:" phpDocumentor\Reflection\Php\Class_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:15:"\UserController";s:36:" phpDocumentor\Reflection\Fqsen name";s:14:"UserController";}s:45:" phpDocumentor\Reflection\Php\Class_ docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:207:"Clase controlador que será la encargada de obtener, para cada tarea, los datos
necesarios de la base de datos, y posteriormente, tras su proceso de elaboración,
enviarlos a la vista para su visualización.";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:0:{}s:42:" phpDocumentor\Reflection\DocBlock context";O:38:"phpDocumentor\Reflection\Types\Context":2:{s:49:" phpDocumentor\Reflection\Types\Context namespace";s:0:"";s:56:" phpDocumentor\Reflection\Types\Context namespaceAliases";a:0:{}}s:43:" phpDocumentor\Reflection\DocBlock location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:8;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:45:" phpDocumentor\Reflection\Php\Class_ abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Class_ final";b:0;s:43:" phpDocumentor\Reflection\Php\Class_ parent";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:15:"\BaseController";s:36:" phpDocumentor\Reflection\Fqsen name";s:14:"BaseController";}s:47:" phpDocumentor\Reflection\Php\Class_ implements";a:0:{}s:46:" phpDocumentor\Reflection\Php\Class_ constants";a:0:{}s:47:" phpDocumentor\Reflection\Php\Class_ properties";a:2:{s:24:"\UserController::$modelo";O:37:"phpDocumentor\Reflection\Php\Property":8:{s:44:" phpDocumentor\Reflection\Php\Property fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:24:"\UserController::$modelo";s:36:" phpDocumentor\Reflection\Fqsen name";s:6:"modelo";}s:47:" phpDocumentor\Reflection\Php\Property docBlock";N;s:44:" phpDocumentor\Reflection\Php\Property types";a:0:{}s:46:" phpDocumentor\Reflection\Php\Property default";N;s:45:" phpDocumentor\Reflection\Php\Property static";b:0;s:49:" phpDocumentor\Reflection\Php\Property visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:7:"private";}s:47:" phpDocumentor\Reflection\Php\Property location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:17;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:43:" phpDocumentor\Reflection\Php\Property type";N;}s:26:"\UserController::$mensajes";O:37:"phpDocumentor\Reflection\Php\Property":8:{s:44:" phpDocumentor\Reflection\Php\Property fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:26:"\UserController::$mensajes";s:36:" phpDocumentor\Reflection\Fqsen name";s:8:"mensajes";}s:47:" phpDocumentor\Reflection\Php\Property docBlock";N;s:44:" phpDocumentor\Reflection\Php\Property types";a:0:{}s:46:" phpDocumentor\Reflection\Php\Property default";N;s:45:" phpDocumentor\Reflection\Php\Property static";b:0;s:49:" phpDocumentor\Reflection\Php\Property visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:7:"private";}s:47:" phpDocumentor\Reflection\Php\Property location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:20;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:43:" phpDocumentor\Reflection\Php\Property type";N;}}s:44:" phpDocumentor\Reflection\Php\Class_ methods";a:10:{s:30:"\UserController::__construct()";O:35:"phpDocumentor\Reflection\Php\Method":9:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:108:"Constructor que crea automáticamente un objeto modelo en el controlador e
inicializa los mensajes a vacío.";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:0:{}s:42:" phpDocumentor\Reflection\DocBlock context";O:38:"phpDocumentor\Reflection\Types\Context":2:{s:49:" phpDocumentor\Reflection\Types\Context namespace";s:0:"";s:56:" phpDocumentor\Reflection\Types\Context namespaceAliases";a:0:{}}s:43:" phpDocumentor\Reflection\DocBlock location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:22;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:30:"\UserController::__construct()";s:36:" phpDocumentor\Reflection\Fqsen name";s:11:"__construct";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:0:{}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:26;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}}s:26:"\UserController::listado()";O:35:"phpDocumentor\Reflection\Php\Method":9:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:140:"Método que obtiene de la base de datos el listado de usuarios y envía dicha
infomación a la vista correspondiente para su visualización.";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:0:{}s:42:" phpDocumentor\Reflection\DocBlock context";O:38:"phpDocumentor\Reflection\Types\Context":2:{s:49:" phpDocumentor\Reflection\Types\Context namespace";s:0:"";s:56:" phpDocumentor\Reflection\Types\Context namespaceAliases";a:0:{}}s:43:" phpDocumentor\Reflection\DocBlock location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:33;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:26:"\UserController::listado()";s:36:" phpDocumentor\Reflection\Fqsen name";s:7:"listado";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:0:{}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:37;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}}s:26:"\UserController::deluser()";O:35:"phpDocumentor\Reflection\Php\Method":9:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:97:"Método de la clase controlador que realiza la eliminación de un usuario a
través del campo id.";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:0:{}s:42:" phpDocumentor\Reflection\DocBlock context";O:38:"phpDocumentor\Reflection\Types\Context":2:{s:49:" phpDocumentor\Reflection\Types\Context namespace";s:0:"";s:56:" phpDocumentor\Reflection\Types\Context namespaceAliases";a:0:{}}s:43:" phpDocumentor\Reflection\DocBlock location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:102;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:26:"\UserController::deluser()";s:36:" phpDocumentor\Reflection\Fqsen name";s:7:"deluser";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:0:{}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:106;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}}s:26:"\UserController::adduser()";O:35:"phpDocumentor\Reflection\Php\Method":9:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:96:"Método de la clase controlador que realiza el añadido de un usuario,
lo hace un administrador.";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:0:{}s:42:" phpDocumentor\Reflection\DocBlock context";O:38:"phpDocumentor\Reflection\Types\Context":2:{s:49:" phpDocumentor\Reflection\Types\Context namespace";s:0:"";s:56:" phpDocumentor\Reflection\Types\Context namespaceAliases";a:0:{}}s:43:" phpDocumentor\Reflection\DocBlock location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:146;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:26:"\UserController::adduser()";s:36:" phpDocumentor\Reflection\Fqsen name";s:7:"adduser";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:0:{}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:150;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}}s:26:"\UserController::actuser()";O:35:"phpDocumentor\Reflection\Php\Method":9:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:155:"Método de la clase controlador que permite actualizar los datos del usuario
cuyo id coincide con el que se pasa como parámetro desde la vista de listado.";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:0:{}s:42:" phpDocumentor\Reflection\DocBlock context";O:38:"phpDocumentor\Reflection\Types\Context":2:{s:49:" phpDocumentor\Reflection\Types\Context namespace";s:0:"";s:56:" phpDocumentor\Reflection\Types\Context namespaceAliases";a:0:{}}s:43:" phpDocumentor\Reflection\DocBlock location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:252;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:26:"\UserController::actuser()";s:36:" phpDocumentor\Reflection\Fqsen name";s:7:"actuser";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:0:{}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:256;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}}s:26:"\UserController::actFoto()";O:35:"phpDocumentor\Reflection\Php\Method":9:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:142:"Método de la clase controlador que permite actualizar la foto del usuario
cuyo id coincide con el que se pasa como parámetro desde la vista.";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:0:{}s:42:" phpDocumentor\Reflection\DocBlock context";O:38:"phpDocumentor\Reflection\Types\Context":2:{s:49:" phpDocumentor\Reflection\Types\Context namespace";s:0:"";s:56:" phpDocumentor\Reflection\Types\Context namespaceAliases";a:0:{}}s:43:" phpDocumentor\Reflection\DocBlock location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:428;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:26:"\UserController::actFoto()";s:36:" phpDocumentor\Reflection\Fqsen name";s:7:"actFoto";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:0:{}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:432;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}}s:28:"\UserController::activarus()";O:35:"phpDocumentor\Reflection\Php\Method":9:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:141:"Método de la clase controlador que permite activar el usuario
cuyo id coincide con el que se pasa como parámetro desde la vista de listado.";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:0:{}s:42:" phpDocumentor\Reflection\DocBlock context";O:38:"phpDocumentor\Reflection\Types\Context":2:{s:49:" phpDocumentor\Reflection\Types\Context namespace";s:0:"";s:56:" phpDocumentor\Reflection\Types\Context namespaceAliases";a:0:{}}s:43:" phpDocumentor\Reflection\DocBlock location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:495;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:28:"\UserController::activarus()";s:36:" phpDocumentor\Reflection\Fqsen name";s:9:"activarus";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:0:{}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:499;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}}s:31:"\UserController::desactivarus()";O:35:"phpDocumentor\Reflection\Php\Method":9:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:144:"Método de la clase controlador que permite desactivar el usuario
cuyo id coincide con el que se pasa como parámetro desde la vista de listado.";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:0:{}s:42:" phpDocumentor\Reflection\DocBlock context";O:38:"phpDocumentor\Reflection\Types\Context":2:{s:49:" phpDocumentor\Reflection\Types\Context namespace";s:0:"";s:56:" phpDocumentor\Reflection\Types\Context namespaceAliases";a:0:{}}s:43:" phpDocumentor\Reflection\DocBlock location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:543;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:31:"\UserController::desactivarus()";s:36:" phpDocumentor\Reflection\Fqsen name";s:12:"desactivarus";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:0:{}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:547;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}}s:33:"\UserController::imprimeListado()";O:35:"phpDocumentor\Reflection\Php\Method":9:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:99:"Método de la clase controlador que imprime el listado de usuarios
con html2pdf aunque no funciona.";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:0:{}s:42:" phpDocumentor\Reflection\DocBlock context";O:38:"phpDocumentor\Reflection\Types\Context":2:{s:49:" phpDocumentor\Reflection\Types\Context namespace";s:0:"";s:56:" phpDocumentor\Reflection\Types\Context namespaceAliases";a:0:{}}s:43:" phpDocumentor\Reflection\DocBlock location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:589;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:33:"\UserController::imprimeListado()";s:36:" phpDocumentor\Reflection\Fqsen name";s:14:"imprimeListado";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:0:{}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:593;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}}s:25:"\UserController::perfil()";O:35:"phpDocumentor\Reflection\Php\Method":9:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:79:"Método de la clase controlador que muestra el perfil del usuario
Sin terminar.";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:0:{}s:42:" phpDocumentor\Reflection\DocBlock context";O:38:"phpDocumentor\Reflection\Types\Context":2:{s:49:" phpDocumentor\Reflection\Types\Context namespace";s:0:"";s:56:" phpDocumentor\Reflection\Types\Context namespaceAliases";a:0:{}}s:43:" phpDocumentor\Reflection\DocBlock location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:637;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:25:"\UserController::perfil()";s:36:" phpDocumentor\Reflection\Fqsen name";s:6:"perfil";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:0:{}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:641;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}}}s:47:" phpDocumentor\Reflection\Php\Class_ usedTraits";a:0:{}s:45:" phpDocumentor\Reflection\Php\Class_ location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:13;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}}}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}}";